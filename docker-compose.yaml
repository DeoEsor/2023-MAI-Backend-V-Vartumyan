version: '3'

networks:
  services-net:
    driver: bridge

volumes:
  db:
    driver: local
    
  certs:
    driver: local

services:

  nginx: #reverse proxy
    image: nginx
    container_name: reverse_proxy
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # ro - read only
      #- ./nginx/proxy.conf:/etc/nginx/proxy.conf:ro
      - ./nginx/data/certbot/conf:/etc/letsencrypt
      - ./nginx/data/certbot/www:/var/www/certbot
      - ./nginx/logs/:/var/log/nginx/
      - ./src/public/static:/var/www/app/static/
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    # Перезапустит nginx контейнер каждые 6 часов и подгрузит новые сертификаты, если есть
    ports:
      - '80:80'
      - '443:443'
    networks: 
      - services-net

  certbot: # Let's encrypt certs provider
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginx/data/certbot/conf:/etc/letsencrypt:rw
      - ./nginx/data/certbot/www:/var/www/certbot:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    # Проверяет каждые 12 часов, нужны ли новые сертификаты
    networks:
      - services-net
  
  database:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - scripts/database.env # config postgres
    networks:
      - services-net
    volumes:
      - db:/var/lib/postgresql/data/ # persist data
    
    #  rabbitmq: #event bus
    #    image: rabbitmq:3-management-alpine
    #    container_name: event_bus
    #    restart: unless-stopped
    #    ports:
    #        - "5672:5672"
    #        - "15672:15672"
    #    networks:
    #      - services-net
    #    
    #  redis:
    #    image: redis:alpine
    #    container_name: redis
    #    ports:
    #      - "6379:6379"
    #    networks:
    #      - services-net
    #    restart: always
    
    ######### SERVICES ###########
  
  identity_service:
    build:
      dockerfile: Dockerfile
      context: src/Services/IdentityService/
    container_name: identity_service
    ports:
      - "8001:8001"
    networks:
      - services-net
    depends_on:
      - nginx
      - database
#      - rabbitmq
#      - redis

  catalog_service:
    build:
      dockerfile: Dockerfile
      context: src/Services/CatalogService/
    container_name: catalog_service
    ports:
      - "8002:8002"
    networks:
      - services-net
    depends_on:
      - identity_service
  
  ordering_service:
    build: 
      dockerfile: Dockerfile
      context: src/Services/OrderingService/
    container_name: ordering_service
    ports:
      - "8003:8003"
    networks:
      - services-net
    depends_on:
      - identity_service
    