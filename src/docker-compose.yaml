version: '3'

services:

  nginx: #reverse proxy
    image: nginx
    container_name: reverse_proxy
    restart: always
    hostname: 'nginx'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf:ro
      - ./nginx/ssl/localhost.crt:/etc/ssl/certs/localhost.crt:ro
      - ./nginx/ssl/localhost.key:/etc/ssl/certs/localhost.key:ro
      - ./nginx/logs/:/var/log/nginx/
    ports:
      - '80:80'
      - '443:443'
  
  database:
    image: postgres
    restart: unless-stopped
    env_file:
      - database.env # configure postgres
    networks:
      - services-net
    volumes:
      - Scripts\database init:/docker-entrypoint-initdb.d/ # inital queries / commands
      - database-data:/var/lib/postgresql/data/ # persist data

  rabbitmq: #event bus
    image: rabbitmq:3-management-alpine
    container_name: event_bus
    restart: unless-stopped
    ports:
        - "5672:5672"
        - "15672:15672"
    networks:
      - services-net
    
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - services-net
    restart: always

######### SERVICES ###########
    
  identity_service:
    build: Services/IdentityService/
    container_name: identity_service
    ports:
      - "8001:8001"
    networks:
      - services-net
    depends_on:
      - nginx
      - database
      - rabbitmq
      - redis

  catalog_service:
    build: Services/CatalogService/
    container_name: catalog_service
    ports:
      - "8002:8002"
    networks:
      - services-net
    depends_on:
      - identity_service
  
  ordering_service:
    build: Services/OrderingService/
    container_name: ordering_service
    ports:
      - "8003:8003"
    networks:
      - services-net
    depends_on:
      - identity_service

networks:
  services-net:
    driver: bridge

volumes:
  db:
    driver: local
    